@inherits LayoutComponentBase

@typeparam TNavBar
@typeparam TLogo
@typeparam TMainMenu
@typeparam TFooter

@inject IJSRuntime JSRuntime

<div data-open="click" data-menu="vertical-menu-modern" data-col="2-columns">
    <nav class="header-navbar main-header-navbar navbar-expand-lg navbar navbar-with-menu fixed-top">
        <div class="navbar-wrapper">
            <div class="navbar-container content">
                <div id="navbar-mobile" class="navbar-collapse">
                    @NavBar()
                </div>
            </div>
        </div>
    </nav>

    <div class="main-menu menu-fixed menu-light menu-accordion menu-shadow" data-scroll-to-active="true">
        <div class="navbar-header">
            <ul class="nav navbar-nav flex-row">
                <li class="nav-item mr-auto">
                    @Logo()
                </li>
                <li class="nav-item nav-toggle">
                    <a class="nav-link modern-nav-toggle pr-0" data-toggle="collapse">
                        <i class="bx bx-x d-block d-xl-none font-medium-4 primary"></i>
                        <i class="toggle-icon bx bx-disc font-medium-4 d-none d-xl-block primary" data-ticon="bx-disc"></i>
                    </a>
                </li>
            </ul>
        </div>
        <div class="shadow-bottom"></div>
        <div class="main-menu-content">
            <ul class="navigation navigation-main" id="main-menu-navigation" data-menu="menu-navigation" data-icon-style="lines">
                @MainMenu()
            </ul>
        </div>
    </div>

    <div class="app-content content">
        <div class="content-overlay"></div>
        <div class="content-wrapper">
            @Body
        </div>
    </div>

    <footer class="footer footer-static footer-light">
        @Footer()
    </footer>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("appInitializer.onAppLoaded");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private RenderFragment NavBar() => builder =>
    {
        builder.OpenComponent<TNavBar>(0);
        builder.CloseComponent();
    };

    private RenderFragment Logo() => builder =>
    {
        builder.OpenComponent<TLogo>(0);
        builder.CloseComponent();
    };

    private RenderFragment MainMenu() => builder =>
    {
        builder.OpenComponent<TMainMenu>(0);
        builder.CloseComponent();
    };

    private RenderFragment Footer() => builder =>
    {
        builder.OpenComponent<TFooter>(0);
        builder.CloseComponent();
    };
}
