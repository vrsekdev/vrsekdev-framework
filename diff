diff --git a/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Blazor.BlazorCommunicationFoundation.Sample.Client.csproj b/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Blazor.BlazorCommunicationFoundation.Sample.Client.csproj
index 39e60d8..5614e8e 100644
--- a/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Blazor.BlazorCommunicationFoundation.Sample.Client.csproj
+++ b/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Blazor.BlazorCommunicationFoundation.Sample.Client.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk.Web">
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
 
   <PropertyGroup>
     <TargetFramework>netstandard2.1</TargetFramework>
@@ -13,6 +13,8 @@
   </ItemGroup>
 
   <ItemGroup>
+    <ProjectReference Include="..\..\Blazor.BlazorCommunicationFoundation.Client\Blazor.BlazorCommunicationFoundation.Client.csproj" />
+    <ProjectReference Include="..\..\Blazor.BlazorCommunicationFoundation\Blazor.BlazorCommunicationFoundation.Core.csproj" />
     <ProjectReference Include="..\Shared\Blazor.BlazorCommunicationFoundation.Sample.Shared.csproj" />
   </ItemGroup>
 
diff --git a/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Pages/FetchData.razor b/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Pages/FetchData.razor
index 212cb6b..c19c2ef 100644
--- a/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Pages/FetchData.razor
+++ b/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Pages/FetchData.razor
@@ -1,6 +1,7 @@
 @page "/fetchdata"
 @using Blazor.BlazorCommunicationFoundation.Sample.Shared
 @inject HttpClient Http
+@inject IWeatherForecastContract WeatherForecastContract
 
 <h1>Weather forecast</h1>
 
@@ -40,7 +41,8 @@ else
 
     protected override async Task OnInitializedAsync()
     {
-        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
+        forecasts = await WeatherForecastContract.GetAsync();
+            //await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
     }
 
 }
diff --git a/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Program.cs b/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Program.cs
index 75c3716..cbbc10a 100644
--- a/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Program.cs
+++ b/src/Blazor.BlazorCommunicationFoundation.Sample/Client/Program.cs
@@ -7,6 +7,9 @@ using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Logging;
+using VrsekDev.Blazor.BlazorCommunicationFoundation.Core.DependencyInjection;
+using Blazor.BlazorCommunicationFoundation.Sample.Shared;
+using VrsekDev.Blazor.BlazorCommunicationFoundation.Client.DependencyInjection;
 
 namespace Blazor.BlazorCommunicationFoundation.Sample.Client
 {
@@ -19,6 +22,9 @@ namespace Blazor.BlazorCommunicationFoundation.Sample.Client
 
             builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
 
+            builder.Services.AddBlazorCommunicationFoundation();
+            builder.Services.AddBCFContract<IWeatherForecastContract>();
+
             await builder.Build().RunAsync();
         }
     }
diff --git a/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Blazor.BlazorCommunicationFoundation.Sample.Server.csproj b/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Blazor.BlazorCommunicationFoundation.Sample.Server.csproj
index e3fa3be..4b5129e 100644
--- a/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Blazor.BlazorCommunicationFoundation.Sample.Server.csproj
+++ b/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Blazor.BlazorCommunicationFoundation.Sample.Server.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk.Web">
+﻿<Project Sdk="Microsoft.NET.Sdk.Web">
 
   <PropertyGroup>
     <TargetFramework>netcoreapp3.1</TargetFramework>
@@ -9,6 +9,7 @@
   </ItemGroup>
 
   <ItemGroup>
+    <ProjectReference Include="..\..\Blazor.BlazorCommunicationFoundation.Server\Blazor.BlazorCommunicationFoundation.Server.csproj" />
     <ProjectReference Include="..\Client\Blazor.BlazorCommunicationFoundation.Sample.Client.csproj" />
     <ProjectReference Include="..\Shared\Blazor.BlazorCommunicationFoundation.Sample.Shared.csproj" />
   </ItemGroup>
diff --git a/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Services/WeatherForecastService.cs b/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Services/WeatherForecastService.cs
new file mode 100644
index 0000000..caeafac
--- /dev/null
+++ b/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Services/WeatherForecastService.cs
@@ -0,0 +1,28 @@
+﻿using Blazor.BlazorCommunicationFoundation.Sample.Shared;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace Blazor.BlazorCommunicationFoundation.Sample.Server.Services
+{
+    public class WeatherForecastService : IWeatherForecastContract
+    {
+        private static readonly string[] Summaries = new[]
+{
+            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
+        };
+
+        public Task<WeatherForecast[]> GetAsync()
+        {
+            var rng = new Random();
+            return Task.FromResult(Enumerable.Range(1, 5).Select(index => new WeatherForecast
+            {
+                Date = DateTime.Now.AddDays(index),
+                TemperatureC = rng.Next(-20, 55),
+                Summary = Summaries[rng.Next(Summaries.Length)]
+            })
+            .ToArray());
+        }
+    }
+}
diff --git a/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Startup.cs b/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Startup.cs
index 7f9436f..80cdafb 100644
--- a/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Startup.cs
+++ b/src/Blazor.BlazorCommunicationFoundation.Sample/Server/Startup.cs
@@ -6,6 +6,10 @@ using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
 using Microsoft.Extensions.Hosting;
 using System.Linq;
+using Blazor.BlazorCommunicationFoundation.Sample.Shared;
+using Blazor.BlazorCommunicationFoundation.Sample.Server.Services;
+using VrsekDev.Blazor.BlazorCommunicationFoundation.Core.DependencyInjection;
+using VrsekDev.Blazor.BlazorCommunicationFoundation.Server.DependencyInjection;
 
 namespace Blazor.BlazorCommunicationFoundation.Sample.Server
 {
@@ -25,6 +29,10 @@ namespace Blazor.BlazorCommunicationFoundation.Sample.Server
 
             services.AddControllersWithViews();
             services.AddRazorPages();
+
+            services.AddTransient<IWeatherForecastContract, WeatherForecastService>();
+            services.AddBlazorCommunicationFoundation();
+            services.AddBCFServer();
         }
 
         // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
diff --git a/src/Blazor.BlazorCommunicationFoundation.Sample/Shared/IWeatherForecastContract.cs b/src/Blazor.BlazorCommunicationFoundation.Sample/Shared/IWeatherForecastContract.cs
new file mode 100644
index 0000000..5768717
--- /dev/null
+++ b/src/Blazor.BlazorCommunicationFoundation.Sample/Shared/IWeatherForecastContract.cs
@@ -0,0 +1,12 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Blazor.BlazorCommunicationFoundation.Sample.Shared
+{
+    public interface IWeatherForecastContract
+    {
+        Task<WeatherForecast[]> GetAsync();
+    }
+}
